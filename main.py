import streamlit as st
import json
from typing import Dict, List, Any, Optional
from datetime import datetime

def show_registration_form():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    col1, col2 = st.columns([1, 3])
    with col1:
        st.image("images/image_innowise2.png", width=200)
    with col2:
        st.markdown("## üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        st.markdown("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    with st.form("registration_form"):
        user_name = st.text_input("–í–∞—à–µ –∏–º—è:", key="user_name_input")
        submitted = st.form_submit_button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        if submitted and user_name.strip():
            st.session_state['user_name'] = user_name.strip()
            st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name.strip()}!")
            st.rerun()
        elif submitted and not user_name.strip():
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
    
    return None

def get_user_results_content(user_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ session_state"""
    if 'user_results' not in st.session_state:
        st.session_state['user_results'] = ""
    return st.session_state['user_results']

def save_wrong_answers(user_name: str, section_name: str, subsection_name: str, 
                      questions: List[Dict], user_answers: List[Dict], 
                      pdf_links: List[str] = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ session_state"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if 'user_results' not in st.session_state:
        st.session_state['user_results'] = ""
    
    # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    wrong_answers = []
    total_questions = len(questions)
    correct_answers = 0
    
    for i, (question, user_answer) in enumerate(zip(questions, user_answers)):
        if user_answer is None:
            continue
            
        is_wrong = False
        if question['question_type'] == 'single_choice':
            if user_answer.get('answer') != question['correct_answer']:
                is_wrong = True
        elif question['question_type'] in ['multiple_choice', 'multi_choice']:
            if set(user_answer.get('answer', [])) != set(question.get('correct_answers', [])):
                is_wrong = True
        
        if is_wrong:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_answer_text = ""
            if question['question_type'] == 'single_choice':
                user_choice = user_answer.get('answer')
                if user_choice is not None:
                    user_answer_text = question['options'][user_choice]
                else:
                    user_answer_text = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
            elif question['question_type'] in ['multiple_choice', 'multi_choice']:
                user_choices = user_answer.get('answer', [])
                if user_choices:
                    user_answer_text = ', '.join([question['options'][i] for i in user_choices])
                else:
                    user_answer_text = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
            
            wrong_answers.append({
                'question_number': i + 1,
                'question_text': question['question_text'],
                'user_answer_text': user_answer_text
            })
        else:
            correct_answers += 1
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    correct_percentage = (correct_answers / total_questions) * 100 if total_questions > 0 else 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    result_text = f"""
{'='*60}
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - {user_name}
–î–∞—Ç–∞: {timestamp}
–†–∞–∑–¥–µ–ª: {section_name}
–ü–æ–¥—Ä–∞–∑–¥–µ–ª: {subsection_name}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}/{total_questions} ({correct_percentage:.1f}%)

"""
    
    if wrong_answers:
        result_text += "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n"
    else:
        result_text += "‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!\n"
    
    for wrong in wrong_answers:
        result_text += f"""
–í–æ–ø—Ä–æ—Å {wrong['question_number']}: {wrong['question_text']}
–í–∞—à –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {wrong['user_answer_text']}
"""
    
    if pdf_links:
        result_text += f"""
–°—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:
"""
        for i, link in enumerate(pdf_links, 1):
            result_text += f"{i}. {link}\n"
    
    result_text += f"\n{'='*60}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤ session_state
    st.session_state['user_results'] += result_text
    st.success(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

def load_quiz_data(file_path: str) -> Optional[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

def load_quiz_data_with_subsections(section_prefix: str, tab_number: int) -> tuple[Optional[Dict[str, Any]], Optional[List[Dict[str, Any]]]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤"""
    import glob
    import os
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    main_file = f"quiz_data/{section_prefix}_{tab_number}.json"
    main_data = load_quiz_data(main_file)
    
    if main_data is not None:
        return main_data, None
    
    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
    pattern = f"quiz_data/{section_prefix}_{tab_number}.*.json"
    subsection_files = sorted(glob.glob(pattern))
    
    if subsection_files:
        subsection_data = []
        for file_path in subsection_files:
            data = load_quiz_data(file_path)
            if data is not None:
                subsection_data.append(data)
        
        if subsection_data:
            return None, subsection_data
    
    return None, None

def render_question(question: Dict[str, Any], question_key: str) -> Dict[str, Any]:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    st.write(f"**–í–æ–ø—Ä–æ—Å {question['question_id']}:** {question['question_text']}")
    
    if question['question_type'] == 'single_choice':
        options = question['options']
        answer = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            options,
            key=f"{question_key}_radio",
            label_visibility="collapsed"
        )
        return {"type": "single_choice", "answer": options.index(answer) if answer else None}
    
    elif question['question_type'] in ['multiple_choice', 'multi_choice']:
        options = question['options']
        selected = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:",
            options,
            key=f"{question_key}_multiselect"
        )
        return {"type": "multiple_choice", "answer": [options.index(opt) for opt in selected]}
    
    elif question['question_type'] == 'free_text':
        answer = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
            key=f"{question_key}_text"
        )
        return {"type": "free_text", "answer": answer}
    
    return {"type": "unknown", "answer": None}

def calculate_score(user_answers: List[Dict], questions: List[Dict]) -> tuple:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    correct = 0
    total = len(questions)
    
    for i, (user_answer, question) in enumerate(zip(user_answers, questions)):
        if user_answer is None:
            continue
            
        if question['question_type'] == 'single_choice':
            if user_answer.get('answer') == question['correct_answer']:
                correct += 1
        elif question['question_type'] in ['multiple_choice', 'multi_choice']:
            # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if 'correct_answers' in question:
                if set(user_answer.get('answer', [])) == set(question['correct_answers']):
                    correct += 1
    
    return correct, total

def main():
    st.set_page_config(
        page_title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –ø–æ ML",
        page_icon="images/favicon.ico",
        layout="wide"
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if 'user_name' not in st.session_state:
        show_registration_form()
        return
    
    # Sidebar –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞
    with st.sidebar:
        # –õ–æ–≥–æ—Ç–∏–ø –≤ sidebar
        st.image("images/image_innowise.png", width=200)
        st.markdown("---")
        st.header("üåø –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞")
        
        # –°–ª–æ–≤–∞—Ä—å —Ä–∞–∑–¥–µ–ª–æ–≤
        sections = {
            "Theory DS - 0": "Fundamentals and prerequisites",
            "Theory DS - 1.1": "Classic supervised algorithms", 
            "Theory DS - 1.2": "Classic unsupervised algorithms",
            "Theory DS - 2.1": "Behind the scene"
        }
        
        selected_section = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            list(sections.keys()),
            index=1,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω Theory DS - 1.1
            format_func=lambda x: f"{x}: {sections[x]}"
        )
        
        st.markdown("---")
        st.markdown(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {st.session_state['user_name']}")
        st.markdown(f"**–¢–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª:** {selected_section}")
        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {sections[selected_section]}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.button("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
            results_content = get_user_results_content(st.session_state['user_name'])
            if results_content:
                st.text_area("–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:", results_content, height=400)
            else:
                st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_content = get_user_results_content(st.session_state['user_name'])
        if results_content:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏",
                data=results_content,
                file_name=f"{st.session_state['user_name']}_results.txt",
                mime="text/plain"
            )
    
    # –õ–æ–≥–æ—Ç–∏–ø –ø–æ —Ü–µ–Ω—Ç—Ä—É
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("images/image_innowise1.png", width=300)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
    st.markdown(f"## Section quiz - {selected_section}: {sections[selected_section]}")
    
    st.markdown("---")
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    tab_configs = {
        "Theory DS - 0": [
            "1. Fundamentals",
            "2. Prerequisites",
            "3. Basic concepts",
            "4. Mathematical foundations",
            "5. Statistics basics",
            "6. Probability theory",
            "7. Linear algebra",
            "8. Calculus",
            "9. Optimization",
            "10. Data preprocessing",
            "11. Feature engineering",
            "12. Model evaluation",
            "13. Overfitting basics"
        ],
        "Theory DS - 1.1": [
            "1. Basic understanding",
            "2. Linear models", 
            "3. Decision Trees",
            "4. KNN",
            "5. LDA/QDA",
            "6. Dimensionality reduction",
            "7. Regularisation",
            "8. ML metrics",
            "9. Validation"
        ],
        "Theory DS - 1.2": [
            "1. Unsupervised problems",
            "2. Clusterisation",
            "3. K-Means",
            "4. Hierarchical Clusterisation",
            "5. DBSCAN",
            "6. HDBSCAN",
            "7. GMM",
            "8. Dimensionality reduction",
            "9. PCA",
            "10. t-SNE",
            "11. UMAP",
            "12. Concept of auto-encoders",
            "13. Anomaly detection"
        ],
        "Theory DS - 2.1": [
            "1. Behind the scenes",
            "2. Model internals",
            "3. Algorithm details",
            "4. Implementation specifics",
            "5. Performance optimization",
            "6. Memory management",
            "7. Computational complexity",
            "8. Scalability issues",
            "9. Advanced techniques",
            "10. Research frontiers",
            "11. Industry practices",
            "12. Best practices",
            "13. Common pitfalls"
        ]
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    tab_names = tab_configs.get(selected_section, [
        "1. Section 1",
        "2. Section 2",
        "3. Section 3",
        "4. Section 4",
        "5. Section 5",
        "6. Section 6",
        "7. Section 7",
        "8. Section 8",
        "9. Section 9",
        "10. Section 10",
        "11. Section 11",
        "12. Section 12",
        "13. Section 13"
    ])
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tabs = st.tabs(tab_names)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≤–∫–ª–∞–¥–∫—É
    for i, tab in enumerate(tabs):
        with tab:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            section_mapping = {
                "Theory DS - 0": "theory_ds_0",
                "Theory DS - 1.1": "theory_ds_1.1",
                "Theory DS - 1.2": "theory_ds_1.2",
                "Theory DS - 2.1": "theory_ds_2.1"
            }
            section_prefix = section_mapping.get(selected_section, "theory_ds_1.1")
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
            quiz_data, quiz_data_list = load_quiz_data_with_subsections(section_prefix, i+1)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –Ω–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
            if quiz_data is None and quiz_data_list is None:
                st.info(f"üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ {i+1} –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                continue
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
            if quiz_data_list is not None:
                for sub_idx, quiz_data in enumerate(quiz_data_list):
                    if quiz_data is None:
                        continue
                        
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º quiz_title –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
                    subsection_name = quiz_data.get('quiz_title', f'–ü–æ–¥—Ä–∞–∑–¥–µ–ª {sub_idx+1}')
                    st.markdown(f"### {subsection_name}")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
                    answer_key = f'answers_{i}_{sub_idx}'
                    if answer_key not in st.session_state:
                        st.session_state[answer_key] = [None] * len(quiz_data['questions'])
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
                    for j, question in enumerate(quiz_data['questions']):
                        question_key = f"tab_{i}_{sub_idx}_question_{j}"
                        user_answer = render_question(question, question_key)
                        st.session_state[answer_key][j] = user_answer
                        st.markdown("---")
                    
                    # –ö–Ω–æ–ø–∫–∞ Apply –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
                    if st.button(f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã - {subsection_name}", key=f"apply_{i}_{sub_idx}"):
                        if f'show_results_{i}_{sub_idx}' not in st.session_state:
                            st.session_state[f'show_results_{i}_{sub_idx}'] = True
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
                    if st.session_state.get(f'show_results_{i}_{sub_idx}', False):
                        st.markdown(f"#### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã - {subsection_name}:")
                        
                        correct, total = calculate_score(st.session_state[answer_key], quiz_data['questions'])
                        score_percent = (correct / total * 100) if total > 0 else 0
                        
                        st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", f"{correct}/{total} ({score_percent:.1f}%)")
                        
                        st.markdown("#### üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                        
                        for j, (question, user_answer) in enumerate(zip(quiz_data['questions'], st.session_state[answer_key])):
                            st.markdown(f"**–í–æ–ø—Ä–æ—Å {j+1}:**")
                            
                            if question['question_type'] == 'single_choice':
                                user_choice = user_answer.get('answer')
                                correct_choice = question['correct_answer']
                                
                                if user_choice == correct_choice:
                                    st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç: {question['options'][user_choice]}")
                                else:
                                    user_answer_text = question['options'][user_choice] if user_choice is not None else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
                                    correct_answer_text = question['options'][correct_choice]
                                    st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∞—à –æ—Ç–≤–µ—Ç: {user_answer_text}")
                                    st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}")
                                
                                st.info(f"üí° **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
                            
                            elif question['question_type'] in ['multiple_choice', 'multi_choice']:
                                user_choices = user_answer.get('answer', [])
                                correct_choices = question.get('correct_answers', [])
                                
                                if set(user_choices) == set(correct_choices):
                                    st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã: {', '.join([question['options'][i] for i in user_choices])}")
                                else:
                                    user_answers_text = ', '.join([question['options'][i] for i in user_choices]) if user_choices else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
                                    correct_answers_text = ', '.join([question['options'][i] for i in correct_choices])
                                    st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã: {user_answers_text}")
                                    st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {correct_answers_text}")
                                
                                st.info(f"üí° **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
                            
                            st.markdown("---")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                        if score_percent < 100:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
                            pdf_links = quiz_data.get('pdf_links', [])
                            save_wrong_answers(
                                st.session_state['user_name'],
                                selected_section,
                                subsection_name,
                                quiz_data['questions'],
                                st.session_state[answer_key],
                                pdf_links
                            )
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ PDF –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                        if 'pdf_links' in quiz_data and quiz_data['pdf_links']:
                            st.markdown("### üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                            if score_percent < 100:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
                                st.info("üí° –£ –≤–∞—Å –µ—Å—Ç—å –æ—à–∏–±–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:")
                                
                                for j, link in enumerate(quiz_data['pdf_links']):
                                    st.link_button(
                                        f"üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª {j+1}",
                                        link
                                    )
                            else:
                                # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                                if st.button("üìö –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è", key=f"show_materials_{i}_{sub_idx}"):
                                    st.info("üìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ:")
                                    
                                    for j, link in enumerate(quiz_data['pdf_links']):
                                        st.link_button(
                                            f"üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª {j+1}",
                                            link
                                        )
                        
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        if st.button("–°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", key=f"hide_{i}_{sub_idx}"):
                            st.session_state[f'show_results_{i}_{sub_idx}'] = False
                            st.rerun()
                    
                    st.markdown("---")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ
            elif quiz_data is not None:
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞
                st.header(quiz_data['quiz_title'])
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
                if f'answers_{i}' not in st.session_state:
                    st.session_state[f'answers_{i}'] = [None] * len(quiz_data['questions'])
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
                for j, question in enumerate(quiz_data['questions']):
                    question_key = f"tab_{i}_question_{j}"
                    user_answer = render_question(question, question_key)
                    st.session_state[f'answers_{i}'][j] = user_answer
                    st.markdown("---")
                
                # –ö–Ω–æ–ø–∫–∞ Apply
                if st.button(f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", key=f"apply_{i}"):
                    if f'show_results_{i}' not in st.session_state:
                        st.session_state[f'show_results_{i}'] = True
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
                if st.session_state.get(f'show_results_{i}', False):
                    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    
                    correct, total = calculate_score(st.session_state[f'answers_{i}'], quiz_data['questions'])
                    score_percent = (correct / total * 100) if total > 0 else 0
                    
                    st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", f"{correct}/{total} ({score_percent:.1f}%)")
                    
                    st.markdown("### üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    
                    for j, (question, user_answer) in enumerate(zip(quiz_data['questions'], st.session_state[f'answers_{i}'])):
                        st.markdown(f"**–í–æ–ø—Ä–æ—Å {j+1}:**")
                        
                        if question['question_type'] == 'single_choice':
                            user_choice = user_answer.get('answer')
                            correct_choice = question['correct_answer']
                            
                            if user_choice == correct_choice:
                                st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç: {question['options'][user_choice]}")
                            else:
                                user_answer_text = question['options'][user_choice] if user_choice is not None else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
                                correct_answer_text = question['options'][correct_choice]
                                st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∞—à –æ—Ç–≤–µ—Ç: {user_answer_text}")
                                st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}")
                            
                            st.info(f"üí° **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
                        
                        elif question['question_type'] in ['multiple_choice', 'multi_choice']:
                            user_choices = user_answer.get('answer', [])
                            correct_choices = question.get('correct_answers', [])
                            
                            if set(user_choices) == set(correct_choices):
                                st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã: {', '.join([question['options'][i] for i in user_choices])}")
                            else:
                                user_answers_text = ', '.join([question['options'][i] for i in user_choices]) if user_choices else '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'
                                correct_answers_text = ', '.join([question['options'][i] for i in correct_choices])
                                st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã: {user_answers_text}")
                                st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {correct_answers_text}")
                            
                            st.info(f"üí° **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {question['explanation']}")
                        
                        st.markdown("---")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                    if score_percent < 100:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
                        pdf_links = quiz_data.get('pdf_links', [])
                        save_wrong_answers(
                            st.session_state['user_name'],
                            selected_section,
                            quiz_data['quiz_title'],
                            quiz_data['questions'],
                            st.session_state[f'answers_{i}'],
                            pdf_links
                        )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ PDF –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                    if 'pdf_links' in quiz_data and quiz_data['pdf_links']:
                        st.markdown("### üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                        if score_percent < 100:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
                            st.info("üí° –£ –≤–∞—Å –µ—Å—Ç—å –æ—à–∏–±–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:")
                            
                            for j, link in enumerate(quiz_data['pdf_links']):
                                st.link_button(
                                    f"üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª {j+1}",
                                    link
                                )
                        else:
                            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                            if st.button("üìö –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è", key=f"show_materials_{i}"):
                                st.info("üìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ:")
                                
                                for j, link in enumerate(quiz_data['pdf_links']):
                                    st.link_button(
                                        f"üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª {j+1}",
                                        link
                                    )
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    if st.button("–°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", key=f"hide_{i}"):
                        st.session_state[f'show_results_{i}'] = False
                        st.rerun()
    
    # –§—É—Ç–µ—Ä —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
    st.markdown("---")
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("images/image_innowise.png", width=100)
        st.markdown("*–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π Innowise*")


if __name__ == "__main__":
    main()
